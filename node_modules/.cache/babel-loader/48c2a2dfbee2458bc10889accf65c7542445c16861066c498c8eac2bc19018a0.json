{"ast":null,"code":"var _jsxFileName = \"/Users/joseojeda/Desktop/Develop/React/cr_sd/src/components/CrudForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initailForm = {\n  name: \"\",\n  symbol: \"\",\n  id: null\n};\nconst CrudForm = _ref => {\n  _s();\n  let {\n    createData,\n    updateData,\n    dataToEdit,\n    setDataToEdit\n  } = _ref;\n  const [form, setForm] = useState(initailForm);\n  useEffect(() => {\n    if (dataToEdit) {\n      setForm(dataToEdit);\n    } else {\n      setForm(initailForm);\n    }\n  }, [dataToEdit]);\n  const handleChange = e => {\n    setForm({\n      ...form,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!form.name || !form.symbol) {\n      alert(\"Datos incompletos\");\n      return;\n    }\n    if (form.id === null) {\n      createData(form);\n    } else {\n      updateData(form);\n    }\n    handleReset();\n  };\n  const handleReset = e => {\n    setForm(initailForm);\n    setDataToEdit(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: dataToEdit ? \"Editar\" : \"Agregar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        placeholder: \"Nombre\",\n        onChange: handleChange,\n        value: form.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"symbol\",\n        placeholder: \"Symbol\",\n        onChange: handleChange,\n        value: form.symbol\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Enviar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"reset\",\n        value: \"Limpiar\",\n        onClick: handleReset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(CrudForm, \"SJJe2LW0SgPfoGjEhL2kTGd7Ibw=\");\n_c = CrudForm;\nexport default CrudForm;\n\n// import React from 'react';\n// import { useState, useEffect } from 'react';\n\n// const initialForm = {\n//     id:'null',\n//     name:'',\n//     symbol:'',\n// }\n\n// const CrudForm = ({createData, updateData, dataToEdit, setDataToEdit}) => {\n\n//     const [form, setForm] = useState({initialForm});\n\n//     const handleChange = (e) => {\n//         setForm({\n//           ...form,\n//           [e.target.name]: e.target.value,\n//         });\n//       };\n\n//       const handleSubmit = (e) => {\n//         e.preventDefault();\n\n//         if (!form.name || !form.symbol) {\n//           alert('Datos incompletos');\n//           return;\n//         }\n\n//         if (form.id === null) {\n//           createData(form);\n//         } else {\n//           updateData(form);\n//         }\n\n//         handleReset();\n//       };\n\n//       const handleReset = (e) => {\n//         setForm(initialForm);\n//         setDataToEdit(null);\n//       };\n\n//     return (\n//         <div>\n//             <h3>Agregar</h3>\n//             <form onSubmit={handleSubmit}>\n//                 <input type='text' name='name' placeholder='Name' onChange={handleChange} value={form.name} />\n//                 <input type='text' name='symbol' placeholder='Short' onChange={handleChange} value={form.symbol}/>\n//                 <input type='submit' value='Enviar'/>\n//                 <input type='reset' value='Limpiar' onClick={handleReset}/>\n//             </form>\n\n//             <h3>{form.name} - {form.symbol}</h3>\n\n//         </div>\n\n//     );\n// };\n\n// export default CrudForm;\nvar _c;\n$RefreshReg$(_c, \"CrudForm\");","map":{"version":3,"names":["React","useState","useEffect","initailForm","name","symbol","id","CrudForm","createData","updateData","dataToEdit","setDataToEdit","form","setForm","handleChange","e","target","value","handleSubmit","preventDefault","alert","handleReset"],"sources":["/Users/joseojeda/Desktop/Develop/React/cr_sd/src/components/CrudForm.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst initailForm = {\n  name: \"\",\n  symbol: \"\",\n  id: null,\n};\n\nconst CrudForm = ({ createData, updateData, dataToEdit, setDataToEdit }) => {\n  const [form, setForm] = useState(initailForm);\n\n  useEffect(() => {\n    if (dataToEdit) {\n      setForm(dataToEdit);\n    } else {\n      setForm(initailForm);\n    }\n  }, [dataToEdit]);\n\n  const handleChange = (e) => {\n    setForm({\n      ...form,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (!form.name || !form.symbol) {\n      alert(\"Datos incompletos\");\n      return;\n    }\n\n    if (form.id === null) {\n      createData(form);\n    } else {\n      updateData(form);\n    }\n\n    handleReset();\n  };\n\n  const handleReset = (e) => {\n    setForm(initailForm);\n    setDataToEdit(null);\n  };\n\n  return (\n    <div>\n      <h3>{dataToEdit ? \"Editar\" : \"Agregar\"}</h3>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Nombre\"\n          onChange={handleChange}\n          value={form.name}\n        />\n        <input\n          type=\"text\"\n          name=\"symbol\"\n          placeholder=\"Symbol\"\n          onChange={handleChange}\n          value={form.symbol}\n        />\n        <input type=\"submit\" value=\"Enviar\" />\n        <input type=\"reset\" value=\"Limpiar\" onClick={handleReset} />\n      </form>\n    </div>\n  );\n};\n\nexport default CrudForm;\n\n// import React from 'react';\n// import { useState, useEffect } from 'react';\n\n// const initialForm = {\n//     id:'null',\n//     name:'',\n//     symbol:'',\n// }\n \n// const CrudForm = ({createData, updateData, dataToEdit, setDataToEdit}) => {\n\n//     const [form, setForm] = useState({initialForm});\n    \n//     const handleChange = (e) => {\n//         setForm({\n//           ...form,\n//           [e.target.name]: e.target.value,\n//         });\n//       };\n    \n//       const handleSubmit = (e) => {\n//         e.preventDefault();\n    \n//         if (!form.name || !form.symbol) {\n//           alert('Datos incompletos');\n//           return;\n//         }\n    \n//         if (form.id === null) {\n//           createData(form);\n//         } else {\n//           updateData(form);\n//         }\n    \n//         handleReset();\n//       };\n    \n//       const handleReset = (e) => {\n//         setForm(initialForm);\n//         setDataToEdit(null);\n//       };\n    \n//     return (\n//         <div>\n//             <h3>Agregar</h3>\n//             <form onSubmit={handleSubmit}>\n//                 <input type='text' name='name' placeholder='Name' onChange={handleChange} value={form.name} />\n//                 <input type='text' name='symbol' placeholder='Short' onChange={handleChange} value={form.symbol}/>\n//                 <input type='submit' value='Enviar'/>\n//                 <input type='reset' value='Limpiar' onClick={handleReset}/>\n//             </form>\n\n//             <h3>{form.name} - {form.symbol}</h3>\n\n//         </div>\n        \n//     );\n// };\n\n// export default CrudForm;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC;AAEnD,MAAMC,WAAW,GAAG;EAClBC,IAAI,EAAE,EAAE;EACRC,MAAM,EAAE,EAAE;EACVC,EAAE,EAAE;AACN,CAAC;AAED,MAAMC,QAAQ,GAAG,QAA2D;EAAA;EAAA,IAA1D;IAAEC,UAAU;IAAEC,UAAU;IAAEC,UAAU;IAAEC;EAAc,CAAC;EACrE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAACE,WAAW,CAAC;EAE7CD,SAAS,CAAC,MAAM;IACd,IAAIQ,UAAU,EAAE;MACdG,OAAO,CAACH,UAAU,CAAC;IACrB,CAAC,MAAM;MACLG,OAAO,CAACV,WAAW,CAAC;IACtB;EACF,CAAC,EAAE,CAACO,UAAU,CAAC,CAAC;EAEhB,MAAMI,YAAY,GAAIC,CAAC,IAAK;IAC1BF,OAAO,CAAC;MACN,GAAGD,IAAI;MACP,CAACG,CAAC,CAACC,MAAM,CAACZ,IAAI,GAAGW,CAAC,CAACC,MAAM,CAACC;IAC5B,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,YAAY,GAAIH,CAAC,IAAK;IAC1BA,CAAC,CAACI,cAAc,EAAE;IAElB,IAAI,CAACP,IAAI,CAACR,IAAI,IAAI,CAACQ,IAAI,CAACP,MAAM,EAAE;MAC9Be,KAAK,CAAC,mBAAmB,CAAC;MAC1B;IACF;IAEA,IAAIR,IAAI,CAACN,EAAE,KAAK,IAAI,EAAE;MACpBE,UAAU,CAACI,IAAI,CAAC;IAClB,CAAC,MAAM;MACLH,UAAU,CAACG,IAAI,CAAC;IAClB;IAEAS,WAAW,EAAE;EACf,CAAC;EAED,MAAMA,WAAW,GAAIN,CAAC,IAAK;IACzBF,OAAO,CAACV,WAAW,CAAC;IACpBQ,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,oBACE;IAAA,wBACE;MAAA,UAAKD,UAAU,GAAG,QAAQ,GAAG;IAAS;MAAA;MAAA;MAAA;IAAA,QAAM,eAC5C;MAAM,QAAQ,EAAEQ,YAAa;MAAA,wBAC3B;QACE,IAAI,EAAC,MAAM;QACX,IAAI,EAAC,MAAM;QACX,WAAW,EAAC,QAAQ;QACpB,QAAQ,EAAEJ,YAAa;QACvB,KAAK,EAAEF,IAAI,CAACR;MAAK;QAAA;QAAA;QAAA;MAAA,QACjB,eACF;QACE,IAAI,EAAC,MAAM;QACX,IAAI,EAAC,QAAQ;QACb,WAAW,EAAC,QAAQ;QACpB,QAAQ,EAAEU,YAAa;QACvB,KAAK,EAAEF,IAAI,CAACP;MAAO;QAAA;QAAA;QAAA;MAAA,QACnB,eACF;QAAO,IAAI,EAAC,QAAQ;QAAC,KAAK,EAAC;MAAQ;QAAA;QAAA;QAAA;MAAA,QAAG,eACtC;QAAO,IAAI,EAAC,OAAO;QAAC,KAAK,EAAC,SAAS;QAAC,OAAO,EAAEgB;MAAY;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QACvD;EAAA;IAAA;IAAA;IAAA;EAAA,QACH;AAEV,CAAC;AAAC,GA/DId,QAAQ;AAAA,KAARA,QAAQ;AAiEd,eAAeA,QAAQ;;AAEvB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}