{"ast":null,"code":"var _jsxFileName = \"/Users/joseojeda/Desktop/Develop/React/cr_sd/src/components/CrudForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialForm = {\n  name: \"\",\n  symbol: \"\",\n  id: \"null\"\n};\nconst CrudForm = _ref => {\n  _s();\n  let {\n    createData,\n    updateData,\n    dataToEdit,\n    setDataToEdit\n  } = _ref;\n  const [form, setForm] = useState({\n    initialForm\n  });\n  useEffect(() => {\n    if (dataToEdit) {\n      setForm(dataToEdit);\n    } else {\n      setForm(initialForm);\n    }\n  }, [dataToEdit]);\n  const handleChange = e => {\n    setForm({\n      ...form,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!form.name || !form.symbol) {\n      alert(\"Datos incompletos\");\n      return;\n    }\n    if (form.id === null) {\n      createData(form);\n    } else {\n      updateData(form);\n    }\n    handleReset();\n  };\n  const handleReset = e => {\n    setForm(initialForm);\n    setDataToEdit(null);\n  };\n  return (\n    /*#__PURE__*/\n    // <div>\n    //     <h3>Agregar</h3>\n    //     <form onSubmit={handleSubmit}>\n    //         <input type=\"text\" name=\"name\" placeholder=\"Name\" onChange={handleChange} value={form.name} />\n    //         <input type=\"text\" name=\"symbol\" placeholder=\"Short\" onChange={handleChange} value={form.symbol}/>\n    //         <input type=\"submit\" value=\"Enviar\"/>\n    //         <input type=\"reset\" value=\"Limpiar\" onClick={handleReset}/>\n    //     </form>\n    //     <h3>{form.name} - {form.symbol}</h3>\n    // </div>\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: dataToEdit ? \"Editar\" : \"Agregar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          placeholder: \"Nombre\",\n          onChange: handleChange,\n          value: form.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"symbol\",\n          placeholder: \"Symbol\",\n          onChange: handleChange,\n          value: form.constellation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Enviar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"reset\",\n          value: \"Limpiar\",\n          onClick: handleReset\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  );\n};\n_s(CrudForm, \"AkC7hYB1uQMiWVRXsinO7KuIqVM=\");\n_c = CrudForm;\nexport default CrudForm;\nvar _c;\n$RefreshReg$(_c, \"CrudForm\");","map":{"version":3,"names":["React","useState","useEffect","initialForm","name","symbol","id","CrudForm","createData","updateData","dataToEdit","setDataToEdit","form","setForm","handleChange","e","target","value","handleSubmit","preventDefault","alert","handleReset","constellation"],"sources":["/Users/joseojeda/Desktop/Develop/React/cr_sd/src/components/CrudForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst initialForm = {\n  name:\"\",  \n  symbol:\"\",\n  id:\"null\",    \n}\n \nconst CrudForm = ({ createData, updateData, dataToEdit, setDataToEdit }) => {\n\n    const [form, setForm] = useState({initialForm});\n\n    useEffect(() => {\n      if (dataToEdit) {\n        setForm(dataToEdit);\n      } else {\n        setForm(initialForm);\n      }\n    }, [dataToEdit]);\n    \n    const handleChange = (e) => {\n        setForm({\n          ...form,\n          [e.target.name]: e.target.value,\n        });\n      };\n    \n      const handleSubmit = (e) => {\n        e.preventDefault();\n    \n        if (!form.name || !form.symbol) {\n          alert(\"Datos incompletos\");\n          return;\n        }\n    \n        if (form.id === null) {\n          createData(form);\n        } else {\n          updateData(form);\n        }\n    \n        handleReset();\n      };\n    \n      const handleReset = (e) => {\n        setForm(initialForm);\n        setDataToEdit(null);\n      };\n    \n    return (\n        // <div>\n        //     <h3>Agregar</h3>\n        //     <form onSubmit={handleSubmit}>\n        //         <input type=\"text\" name=\"name\" placeholder=\"Name\" onChange={handleChange} value={form.name} />\n        //         <input type=\"text\" name=\"symbol\" placeholder=\"Short\" onChange={handleChange} value={form.symbol}/>\n        //         <input type=\"submit\" value=\"Enviar\"/>\n        //         <input type=\"reset\" value=\"Limpiar\" onClick={handleReset}/>\n        //     </form>\n\n        //     <h3>{form.name} - {form.symbol}</h3>\n\n        // </div>\n\n      <div>\n        <h3>{dataToEdit ? \"Editar\" : \"Agregar\"}</h3>\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Nombre\"\n            onChange={handleChange}\n            value={form.name}\n          />\n          <input\n            type=\"text\"\n            name=\"symbol\"\n            placeholder=\"Symbol\"\n            onChange={handleChange}\n            value={form.constellation}\n          />\n          <input type=\"submit\" value=\"Enviar\" />\n          <input type=\"reset\" value=\"Limpiar\" onClick={handleReset} />\n        </form>\n    </div>\n        \n    );\n\n    \n};\n\nexport default CrudForm;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC;AAEnD,MAAMC,WAAW,GAAG;EAClBC,IAAI,EAAC,EAAE;EACPC,MAAM,EAAC,EAAE;EACTC,EAAE,EAAC;AACL,CAAC;AAED,MAAMC,QAAQ,GAAG,QAA2D;EAAA;EAAA,IAA1D;IAAEC,UAAU;IAAEC,UAAU;IAAEC,UAAU;IAAEC;EAAc,CAAC;EAEnE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC;IAACE;EAAW,CAAC,CAAC;EAE/CD,SAAS,CAAC,MAAM;IACd,IAAIQ,UAAU,EAAE;MACdG,OAAO,CAACH,UAAU,CAAC;IACrB,CAAC,MAAM;MACLG,OAAO,CAACV,WAAW,CAAC;IACtB;EACF,CAAC,EAAE,CAACO,UAAU,CAAC,CAAC;EAEhB,MAAMI,YAAY,GAAIC,CAAC,IAAK;IACxBF,OAAO,CAAC;MACN,GAAGD,IAAI;MACP,CAACG,CAAC,CAACC,MAAM,CAACZ,IAAI,GAAGW,CAAC,CAACC,MAAM,CAACC;IAC5B,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,YAAY,GAAIH,CAAC,IAAK;IAC1BA,CAAC,CAACI,cAAc,EAAE;IAElB,IAAI,CAACP,IAAI,CAACR,IAAI,IAAI,CAACQ,IAAI,CAACP,MAAM,EAAE;MAC9Be,KAAK,CAAC,mBAAmB,CAAC;MAC1B;IACF;IAEA,IAAIR,IAAI,CAACN,EAAE,KAAK,IAAI,EAAE;MACpBE,UAAU,CAACI,IAAI,CAAC;IAClB,CAAC,MAAM;MACLH,UAAU,CAACG,IAAI,CAAC;IAClB;IAEAS,WAAW,EAAE;EACf,CAAC;EAED,MAAMA,WAAW,GAAIN,CAAC,IAAK;IACzBF,OAAO,CAACV,WAAW,CAAC;IACpBQ,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAEH;IAAA;IACI;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IAEA;IAEF;MAAA,wBACE;QAAA,UAAKD,UAAU,GAAG,QAAQ,GAAG;MAAS;QAAA;QAAA;QAAA;MAAA,QAAM,eAC5C;QAAM,QAAQ,EAAEQ,YAAa;QAAA,wBAC3B;UACE,IAAI,EAAC,MAAM;UACX,IAAI,EAAC,MAAM;UACX,WAAW,EAAC,QAAQ;UACpB,QAAQ,EAAEJ,YAAa;UACvB,KAAK,EAAEF,IAAI,CAACR;QAAK;UAAA;UAAA;UAAA;QAAA,QACjB,eACF;UACE,IAAI,EAAC,MAAM;UACX,IAAI,EAAC,QAAQ;UACb,WAAW,EAAC,QAAQ;UACpB,QAAQ,EAAEU,YAAa;UACvB,KAAK,EAAEF,IAAI,CAACU;QAAc;UAAA;UAAA;UAAA;QAAA,QAC1B,eACF;UAAO,IAAI,EAAC,QAAQ;UAAC,KAAK,EAAC;QAAQ;UAAA;UAAA;UAAA;QAAA,QAAG,eACtC;UAAO,IAAI,EAAC,OAAO;UAAC,KAAK,EAAC,SAAS;UAAC,OAAO,EAAED;QAAY;UAAA;UAAA;UAAA;QAAA,QAAG;MAAA;QAAA;QAAA;QAAA;MAAA,QACvD;IAAA;MAAA;MAAA;MAAA;IAAA;EACL;AAKV,CAAC;AAAC,GAhFId,QAAQ;AAAA,KAARA,QAAQ;AAkFd,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}